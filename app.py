# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YKHSV8HcS8wB5yVmfDNHvfx-ypguTlNG
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import pandas as pd
# import streamlit as st
# import plotly.graph_objs as go
# import joblib
# 
# class EnergyConsumptionAndPredictionApp:
#     def _init_(self):
#         st.set_page_config(
#             page_title="Energy Consumption And Prediction App",
#             page_icon="âš¡",
#             layout="wide",
#             initial_sidebar_state="expanded"
#         )
#         self.setup_page()
#         self.load_resources()
# 
#     def setup_page(self):
#         bg_color = st.sidebar.selectbox("Select Background Color", [
#             "Green", "Blue", "purple",
#             "red", " Yellow",
#             " Grey", "orange"
#         ])
#         bg_color_code = {
#             "Green": "#F4F6F7",
#             "Blue": "#FFFFFF",
#             "Purple": "#E3F2FD",
#             "Red": "#E8F5E9",
#             " Yellow": "#FFFDE7",
#             " Grey": "#F5F5F5",
#             "Orange": "#FCE4EC"
#         }.get(bg_color, "#FFFFFF")
# 
#         st.markdown(f"""
#         <style>
#         .stApp {{
#             background-color: {bg_color_code};
#         }}
#         .main-header {{
#             background: linear-gradient(135deg, #4CAF50 0%, #81C784 100%);
#             color: blue;
#             padding: 20px;
#             text-align: center;
#             border-radius: 10px;
#             margin-bottom: 20px;
#         }}
#         </style>
#         """, unsafe_allow_html=True)
# 
#     def load_resources(self):
#         try:
#             self.linear_model = joblib.load("linear_model.pkl")
#             self.feature_names = joblib.load("feature_names.pkl")
#             st.success("Resources loaded successfully!")
#         except Exception as e:
#             st.error(f"Error loading resources: {e}")
# 
#     def create_gauge_chart(self, value, title, color="#4CAF50"):
#         fig = go.Figure(go.Indicator(
#             mode="gauge+number",
#             value=value,
#             title={'text': title, 'font': {'size': 20}},
#             gauge={'axis': {'range': [0, max(1.0, value * 2)], 'tickwidth': 1}}
#         ))
#         return fig
# 
#     def run(self):
#         st.markdown("<div class='main-header'><h1>âš¡ Energy Consumption And Prediction</h1></div>", unsafe_allow_html=True)
# 
#         voltage = st.sidebar.slider("Voltage (V)", 220.0, 255.0, 240.0)
#         global_intensity = st.sidebar.slider("Global Intensity (A)", 0.0, 20.0, 4.63)
#         sub_metering_1 = st.sidebar.slider("Sub Metering 1 (Wh)", 0.0, 50.0, 1.12)
# 
#         try:
#             input_data = pd.DataFrame({
#                 "Voltage": [voltage],
#                 "Global_intensity": [global_intensity],
#                 "Sub_metering_1": [sub_metering_1]
#             })[self.feature_names]
# 
#             linear_pred = self.linear_model.predict(input_data)[0]
#             st.subheader(f"ðŸ”® Linear Regression Prediction: {linear_pred:.2f} kW")
#         except ValueError as e:
#             st.error(f"Prediction error: {e}")
# 
# def main():
#     app = EnergyConsumptionAndPredictionApp()
#     app.run()
#